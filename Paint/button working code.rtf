{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22 import java.awt.AlphaComposite;\par
import java.awt.BasicStroke;\par
import java.awt.Color;\par
import java.awt.Graphics;\par
import java.awt.Graphics2D;\par
import java.awt.Image;\par
import java.awt.RenderingHints;\par
import java.awt.Transparency;\par
import java.awt.event.MouseEvent;\par
import java.awt.event.MouseListener;\par
import java.awt.event.MouseMotionListener;\par
import java.awt.image.BufferedImage;\par
import java.io.File;\par
import java.io.IOException;\par
\par
import javax.imageio.ImageIO;\par
import javax.swing.JOptionPane;\par
import javax.swing.JPanel;\par
\par
\par
\par
/**\par
 *\par
 * @author Dan Wagar\par
 */\par
\par
\par
public class MousePanel extends JPanel implements MouseListener, MouseMotionListener\{\par
\par
    public static MousePanel inst;\par
    private static BufferedImage grid;\par
    \tab\tab\tab\tab\tab\tab\tab  \par
    \tab\tab\tab\tab\tab\tab\tab  \par
    private static Graphics2D gc;\par
    private static int startX,\par
   \tab\tab\tab\tab\tab    startY,\par
\tab\tab\tab\tab\tab    endX,\par
    \tab\tab\tab\tab    endY,\par
    \tab\tab\tab\tab    dragStartX,\par
    \tab\tab\tab\tab    dragStartY,\par
      \tab\tab\tab\tab    flag = 0,\par
    \tab\tab\tab\tab    width = 0, \par
\tab                    height = 0,\par
\tab\tab\tab\tab\tab    changeX,\par
\tab\tab\tab\tab\tab    changeY,\par
\tab\tab\tab\tab\tab    w,\par
\tab\tab\tab\tab\tab    h;\par
\tab private static boolean change = false,\par
\tab\tab\tab\tab\tab\tab    first = true;\par
\tab private static boolean resize = false;\par
\tab private static boolean mouseDrg = false;\par
\tab\tab\tab\tab\tab\tab   \par
\tab  \par
\tab //private static float thickness = SliderPanel.getStrokeThickness();\par
    \par
    MousePanel()\par
    \{\par
        addMouseListener(this);\par
        addMouseMotionListener(this);\par
    \}\par
    \par
    public static MousePanel getInstance()\par
    \{\par
        if(inst == null)\par
            inst =  new MousePanel();\par
         return inst;\par
    \}\par
    \par
    public static void changeFlag(int i)\par
    \{\par
    \tab flag = i;\par
    \}\par
    \par
    public static void changeResize(boolean b)\par
    \{\par
    \tab resize = b;\par
    \par
    \}\par
    \par
    public void drawRect()\par
\tab\{\par
    \tab gc.setColor(SliderPanel.getColor());\par
    \tab gc.setStroke(new BasicStroke(SliderPanel.getStrokeThickness()));\par
    \tab\par
    \tab if (startY > endY && startX > endX)\par
\tab\tab\tab gc.drawRect(startX - width, startY - height, width, height);\par
\tab\tab else if(startX > endX)\par
\tab\tab\tab gc.drawRect(startX - width, startY, width, height);\par
\tab\tab else if (startY > endY)\par
\tab\tab\tab gc.drawRect(startX, startY - height, width, height);\par
\tab\tab else\par
\tab\tab\tab gc.drawRect(startX, startY, width, height);\par
\tab\tab repaint();\par
\tab\}\par
    \par
    public void fillRect()\par
    \{\par
    \tab gc.setColor(SliderPanel.getColor());\par
    \tab gc.setStroke(new BasicStroke(SliderPanel.getStrokeThickness()));\par
    \tab\par
    \tab if (startY > endY && startX > endX)\par
\tab\tab\tab gc.fillRect(startX - width, startY - height, width, height);\par
\tab\tab else if(startX > endX)\par
\tab\tab\tab gc.fillRect(startX - width, startY, width, height);\par
\tab\tab else if (startY > endY)\par
\tab\tab\tab gc.fillRect(startX, startY - height, width, height);\par
\tab\tab else\par
\tab\tab\tab gc.fillRect(startX, startY, width, height);\par
\tab\tab repaint();\par
\tab\}\par
\par
\tab public void drawOval()\par
\tab\{\par
\tab\tab gc.setColor(SliderPanel.getColor());\par
\tab\tab gc.setStroke(new BasicStroke(SliderPanel.getStrokeThickness()));\par
\tab\tab\par
\tab\tab if (startY > endY && startX > endX)\par
\tab\tab\tab gc.drawOval(startX - width, startY - height, width, height);\par
\tab\tab else if (startY > endY)\par
\tab\tab\tab gc.drawOval(startX, startY - height, width, height);\tab\tab\par
\tab\tab else if (startX > endX)\par
\tab\tab\tab gc.drawOval(startX - width, startY, width, height);\par
\tab\tab else\par
\tab\tab\tab gc.drawOval(startX, startY, width, height);\par
\tab\tab repaint();\par
\tab\}\par
\tab\par
\tab public void fillOval()\par
\tab\{\par
\tab\tab gc.setColor(SliderPanel.getColor());\par
\tab\tab gc.setStroke(new BasicStroke(SliderPanel.getStrokeThickness()));\par
\tab\tab\par
\tab\tab if (startY > endY && startX > endX)\par
\tab\tab\tab gc.fillOval(startX - width, startY - height, width, height);\par
\tab\tab else if(startX > endX)\par
\tab\tab\tab gc.fillOval(startX - width, startY, width, height);\par
\tab\tab else if (startY > endY)\par
\tab\tab\tab gc.fillOval(startX, startY - height, width, height);\par
\tab\tab else\par
\tab\tab\tab gc.fillOval(startX, startY, width, height);\par
\tab\tab repaint();\par
\tab\}\par
\tab public void drawLine()\par
\tab\{\par
\tab\tab gc.setColor(SliderPanel.getColor());\par
\tab\tab gc.setStroke(new BasicStroke(SliderPanel.getStrokeThickness()));\par
\tab\tab gc.drawLine(startX, startY, endX, endY);\par
\tab\tab repaint();\par
\tab\}\par
\tab public void freeDraw()\par
\tab\{\par
\tab\tab gc.setColor(SliderPanel.getColor());\par
\tab\tab gc.setStroke((new BasicStroke(SliderPanel.getStrokeThickness())));\par
\tab\tab gc.drawLine(startX, startY, endX, endY);\par
\tab\tab repaint();\par
\tab\}\par
\tab\par
\tab public void erase()\par
\tab\{\par
\tab\tab gc.setColor(Color.white);\par
\tab\tab gc.setStroke((new BasicStroke(SliderPanel.getStrokeThickness())));\par
\tab\tab gc.drawLine(startX, startY, endX, endY);\par
\tab\tab repaint();\par
\tab\}\par
\tab\par
\tab public static void clear()\par
\tab\{\par
\tab\tab grid = null;\par
\tab\tab getInstance().repaint();\par
\tab\}\par
\tab\par
\tab public void setBGColor()\par
\tab\{\par
\tab\tab gc.fillRect(0, 0, w, h );\par
\tab\tab repaint();\par
\tab\}\par
\tab\par
\tab public void resize()\par
\tab\{\par
\tab\tab System.out.println("resize");\par
\tab\tab\par
\tab\tab w = this.getWidth();\par
    \tab h = this.getHeight();\par
    \tab\par
    \tab BufferedImage temp =  new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);\par
    \tab     \tab\par
    \tab gc = temp.createGraphics();\par
    \tab gc.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\par
    \tab\tab\tab\tab\tab\tab\tab\tab RenderingHints.VALUE_INTERPOLATION_BILINEAR);\par
    \tab gc.drawImage(grid, 0, 0, w, h, null);\par
    \tab\par
    \tab grid = temp;\par
    \tab repaint();\par
    \}\par
\tab\par
\tab public void drawing()\par
\tab\{\tab\par
\tab\tab\par
\tab\tab switch(flag)\{\par
\tab\tab     case 1: drawRect();   break;\par
\tab\tab     case 2: drawOval();   break;\par
\tab\tab     case 3: drawLine();   break;\par
\tab\tab     case 4: freeDraw();\tab   break;\par
\tab\tab     case 5: fillRect();   break;\par
\tab\tab     case 6: fillOval();   break;\par
\tab\tab     case 7: freeDraw();   break;\par
\tab\tab     case 8: erase();      break;\par
\tab\tab     case 9: resize();     break;\par
\tab\tab\tab\}\tab\par
\tab\tab\par
\tab\}\par
\tab     \par
\tab\par
\par
    public void paintComponent(Graphics g)\par
    \{\par
    \tab super.paintComponent(g);\par
        Graphics2D g2 = (Graphics2D)g;\par
       \par
        if (grid == null)\{\par
        \tab w = this.getWidth();\par
        \tab h = this.getHeight();\par
          \tab grid =  new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\par
          \tab gc=grid.createGraphics();\par
        \tab gc.setColor(Color.white);\par
        \tab gc.fillRect(0, 0, w, h);           \tab\par
        \}\par
        if (resize == true)\par
        \{resize();\par
        resize = false;\}\par
            \par
        g2.drawImage(grid, null, 0, 0);\par
    \}\par
                      \par
    public void mouseExited(MouseEvent e)\{ \}\par
    public void mouseEntered(MouseEvent e)\{\}\par
    public void mouseClicked(MouseEvent e)\{\}\par
    public void mousePressed(MouseEvent e)\par
    \{\par
    \tab startX = e.getX();\par
    \tab startY = e.getY();  \par
    \tab dragStartX = startX;\par
    \tab dragStartY = startY;\par
    \}\par
    \par
    public void mouseReleased(MouseEvent e)\par
    \{\par
    \tab\par
    \tab endX = e.getX();\par
    \tab endY = e.getY();\par
    \tab first = true;\par
    \tab\par
    \tab if(startY > endY)\par
    \tab\tab height = startY - endY;\par
    \tab else\par
    \tab\tab height = endY - startY;\par
    \tab if(startX > endX)\par
    \tab\tab width = startX - endX;\par
    \tab else\par
    \tab\tab width = endX - startX;\par
    \tab drawing();\par
    \tab mouseDrg = false;\par
    \tab\par
    \tab\par
    \}\par
    \par
    public void mouseDragged(MouseEvent e)\par
    \{\par
    \tab flag = 10;\par
    \tab\par
    \tab if(flag == 7 || flag == 8)\{\par
    \tab\par
    \tab\tab if(first == true)\{\par
    \tab\tab\tab startX = dragStartX;\par
    \tab\tab\tab startY = dragStartY;\par
    \tab\tab\par
    \tab\tab\tab endX = e.getX();\par
    \tab\tab\tab endY = e.getY();\par
    \tab\tab\tab changeX = endX;\par
    \tab\tab\tab changeY = endY;\par
    \tab\tab\par
    \tab\tab\tab first = false;\par
    \tab\tab\tab change = true;\par
    \tab\tab\}\par
    \tab\tab else if(change == false)\{\par
    \tab\tab\tab startX = endX;\par
    \tab\tab\tab startY = endY;\par
    \tab\tab\tab endX = e.getX();\par
    \tab\tab\tab endY = e.getY();\par
    \tab\tab\tab changeX = endX;\par
    \tab\tab\tab changeY = endY;\par
    \tab\tab\tab change = true;\par
    \tab\tab\}\par
    \tab\tab else if(change == true)\{\par
    \tab\tab\tab startX = changeX;\par
    \tab\tab\tab startY = changeY;\par
    \tab\tab\tab endX = e.getX();\par
    \tab\tab\tab endY = e.getY();\par
    \tab\tab\tab change = false;\par
    \tab\tab\}\par
    \par
    \tab\tab drawing();\par
    \tab\}\par
    \tab\par
    \}\par
    public void mouseMoved(MouseEvent e)\{\}\par
    \par
    public static void saveImage() \{\par
    \tab System.out.println("saveImage");\par
    \tab\par
    \tab //JOptionPane inBox = new JOptionPane();\par
    \tab String inString,\par
    \tab\tab    saveString;\par
    \tab\par
    \tab inString = JOptionPane.showInputDialog("Enter File Name");\par
    \tab    \par
    \tab saveString = (inString + ".png");\par
    \tab    \par
    \par
        try\{\par
        File outputfile = new File(saveString);\par
        ImageIO.write(grid, "png", outputfile);\par
        \}\par
        catch (IOException e) \{\par
        System.out.println("Image could not be read");\par
        System.exit(1);\par
        \}\par
    \}\par
\}\par
   \par
}
 